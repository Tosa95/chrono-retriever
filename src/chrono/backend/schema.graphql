type Query {
    node(id: ID!): Node!
    windows_states(from_timestamp: Timestamp!, to_timestamp: Timestamp!): [WindowsState]!
    activity_stats(from_timestamp: Timestamp!, to_timestamp: Timestamp!,
        activity_filter: ActivityRegexFilterInput!): ActivityStats!
    aggregate(from_timestamp: Timestamp!, to_timestamp: Timestamp!, feature_extractor: String!): AggregationResult!
}

type Mutation {
    windows_state(state: WindowsStateInput): WindowsState!
}

interface Node {
    id: ID
}

type  WindowInfo {
    name: String!
    process_name: String!
    process_id: Int!
    url: String
    project: String
    file: String
    branch: String
    type_: String!
}

scalar Timestamp

type WindowsState implements Node {
    id: ID!
    timestamp: Timestamp!
    hostname: String!
    username: String
    active_window: WindowInfo
    windows: [WindowInfo]!
    time_delta: Float
}

type ActivityStats {
    total_time: Float!
    total_time_human: String!
    from_timestamp: Timestamp!
    to_timestamp: Timestamp!
}

scalar AggregationResult

input WindowInfoInput {
    name: String!
    process_name: String!
    process_id: Int!
    url: String
    project: String
    file: String
    branch: String
    type_: String!
}


input WindowsStateInput {
    timestamp: Timestamp!
    hostname: String!
    username: String
    active_window: WindowInfoInput
    windows: [WindowInfoInput]!
}

input ActivityRegexFilterInput {
    hostname_re: String
    username_re: String
    process_name_re: String
    project_re: String
    name_re: String
    file_re: String
    branch_re: String
    url_re: String
}